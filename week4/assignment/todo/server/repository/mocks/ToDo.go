// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import pb "github.com/xuanit/testing/todo/pb"

// ToDo is an autogenerated mock type for the ToDo type
type ToDo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *ToDo) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *ToDo) Get(id string) (*pb.Todo, error) {
	ret := _m.Called(id)

	var r0 *pb.Todo
	if rf, ok := ret.Get(0).(func(string) *pb.Todo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: items
func (_m *ToDo) Insert(items *pb.Todo) error {
	ret := _m.Called(items)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pb.Todo) error); ok {
		r0 = rf(items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: limit, notCompleted
func (_m *ToDo) List(limit int32, notCompleted bool) ([]*pb.Todo, error) {
	ret := _m.Called(limit, notCompleted)

	var r0 []*pb.Todo
	if rf, ok := ret.Get(0).(func(int32, bool) []*pb.Todo); ok {
		r0 = rf(limit, notCompleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, bool) error); ok {
		r1 = rf(limit, notCompleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
